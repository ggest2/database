#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int arr[200] = {0,};

// 트리 노드 구조체 정의
typedef struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

// 큐 구조체 정의
typedef struct Queue {
    TreeNode **array;
    int front, rear;
    unsigned capacity;
} Queue;

// 큐 생성 함수
Queue* createQueue(unsigned capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->array = (TreeNode**)malloc(queue->capacity * sizeof(TreeNode*));
    return queue;
}

// 큐가 가득 찼는지 확인하는 함수
int isFull(Queue* queue) {
    return (queue->rear + 1) % queue->capacity == queue->front;
}

// 큐가 비어 있는지 확인하는 함수
int isEmpty(Queue* queue) {
    return queue->front == -1;
}

// 큐에 요소를 추가하는 함수
void enqueue(Queue* queue, TreeNode *item) {
    if (isFull(queue))
        return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    if (queue->front == -1)
        queue->front = queue->rear;
}

// 큐에서 요소를 제거하고 반환하는 함수
TreeNode* dequeue(Queue* queue) {
    if (isEmpty(queue))
        return NULL;
    TreeNode *item = queue->array[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front = (queue->front + 1) % queue->capacity;
    return item;
}

TreeNode* checkRightMost(TreeNode* root, int size){
    TreeNode* rightMostparent = NULL;
    Queue* queue = createQueue(size);
    if(root == NULL) return NULL;
    enqueue(queue, root);
    while(!isEmpty(queue)){
        TreeNode* current = dequeue(queue);
        if(current->left != NULL){
            enqueue(queue, current->left);
            rightMostparent = current;
        }
        if (current->right != NULL) {
           enqueue(queue, current->right);
            rightMostparent = current;
        }
    }
    root = rightMostparent;

    if(root->right->val == -1){
        free(root->right);
        root->right = NULL;
    }
    return root;
}


//0만 있는 서브트리를 제거하는 함수
TreeNode* removeOnlyZero(TreeNode* root){
    if(!root) return NULL;
    root->left = removeOnlyZero(root->left);
    root->right = removeOnlyZero(root->right);
    if((root->left == NULL || root->left == 0 || root->left->val == -1)&&(root->right == NULL || root->right == 0 || root->right->val == -1)&&(root->val == 0)){
        free(root->left);
        free(root->right);
        root->left = root->right = NULL;
        root->val = -1;
    return root;
    }
    return root;
}

// 레벨 순회 트리 생성 함수
TreeNode* createLevelOrderTree(int arr[], int size) {
    if (size <= 0)
        return NULL;

    TreeNode *root = (TreeNode*)malloc(sizeof(TreeNode));
    root->val = arr[0];
    root->left = root->right = NULL;

    Queue* queue = createQueue(size);
    enqueue(queue, root);

    int i = 1;
    while (i < size) {
        TreeNode *parent = dequeue(queue);
        if (parent == NULL)
            break;

        if (arr[i] != -1) {
            TreeNode *leftChild = (TreeNode*)malloc(sizeof(TreeNode));
            leftChild->val = arr[i];
            leftChild->left = leftChild->right = NULL;
            parent->left = leftChild;
            enqueue(queue, leftChild);
        }
        else if(arr[i] == -1){
            TreeNode *NULLNode = (TreeNode*)malloc(sizeof(TreeNode));
            NULLNode->val = arr[i];
            NULLNode->left = NULLNode->right = NULL;
            parent->left = NULLNode;
        }
        i++;

        if (i < size && arr[i] != -1) {
            TreeNode *rightChild = (TreeNode*)malloc(sizeof(TreeNode));
            rightChild->val = arr[i];
            rightChild->left = rightChild->right = NULL;
            parent->right = rightChild;
            enqueue(queue, rightChild);
        }
        else if(i<size && arr[i] == -1){
            TreeNode *NULLNode = (TreeNode*)malloc(sizeof(TreeNode));
            NULLNode->val = arr[i];
            NULLNode->left = NULLNode->right = NULL;
            parent->left = NULLNode;
        }
        i++;
    }
    return root;
}

// 트리를 레벨 순서로 출력하는 함수
void printLevelOrder(TreeNode* root, int size) {
    if (root == NULL)
        return;
    
    Queue* queue = createQueue(size);
    enqueue(queue, root);

    while (!isEmpty(queue)) {
            TreeNode *temp = dequeue(queue);
            
            if (temp != NULL) {
            printf("%d ", temp->val);
                if(root->left != NULL)
                    enqueue(queue, temp->left);
                if(root->right != NULL)
                    enqueue(queue, temp->right);
        }
    }
}

int main() {
    int i=0, cnt=0;
	char str[400] = {0,};
	char *s;
	scanf("%[^\n]", str);	
	for (i = 2; i > 1; cnt += i > 0) {
  	i = sscanf(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
	}

    TreeNode* root = createLevelOrderTree(arr, cnt);
    removeOnlyZero(root);
    checkRightMost(root, cnt);
    printLevelOrder(root, cnt);
    printf("\n");

    return 0;
}
