#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int arr[3000] = {0,};

typedef struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;

typedef struct Queue {
    TreeNode **array;
    int front, rear;
    unsigned capacity;
} Queue;

Queue* createQueue(unsigned capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->capacity = capacity;
    queue->front = queue->rear = -1;
    queue->array = (TreeNode**)malloc(queue->capacity * sizeof(TreeNode*));
    return queue;
}

int isFull(Queue* queue) {
    return (queue->rear + 1) % queue->capacity == queue->front;
}

int isEmpty(Queue* queue) {
    return queue->front == -1;
}

void enqueue(Queue* queue, TreeNode *item) {
    if (isFull(queue))
        return;
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->array[queue->rear] = item;
    if (queue->front == -1)
        queue->front = queue->rear;
}

TreeNode* dequeue(Queue* queue) {
    if (isEmpty(queue))
        return NULL;
    TreeNode *item = queue->array[queue->front];
    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else
        queue->front = (queue->front + 1) % queue->capacity;
    return item;
}

TreeNode* createTree(int arr[], int size) {
    if (size <= 0)
        return NULL;

    TreeNode *root = (TreeNode*)malloc(sizeof(TreeNode));
    root->val = arr[0];
    root->left = root->right = NULL;

    Queue* queue = createQueue(size);
    enqueue(queue, root);

    int i = 1;
    while (i < size) {
        TreeNode *parent = dequeue(queue);
        if (parent == NULL)
            break;

        if (arr[i] != -1) {
            TreeNode *leftChild = (TreeNode*)malloc(sizeof(TreeNode));
            leftChild->val = arr[i];
            leftChild->left = leftChild->right = NULL;
            parent->left = leftChild;
            enqueue(queue, leftChild);
        }
        else if(arr[i] == -1){
            TreeNode *NULLNode = (TreeNode*)malloc(sizeof(TreeNode));
            NULLNode->val = arr[i];
            NULLNode->left = NULLNode->right = NULL;
            parent->left = NULLNode;
        }
        i++;

        if (i < size && arr[i] != -1) {
            TreeNode *rightChild = (TreeNode*)malloc(sizeof(TreeNode));
            rightChild->val = arr[i];
            rightChild->left = rightChild->right = NULL;
            parent->right = rightChild;
            enqueue(queue, rightChild);
        }
        else if(i<size && arr[i] == -1){
            TreeNode *NULLNode = (TreeNode*)malloc(sizeof(TreeNode));
            NULLNode->val = arr[i];
            NULLNode->left = NULLNode->right = NULL;
            parent->right = NULLNode;
        }
        i++;
    }
    return root;
}


int solution (TreeNode * root) {
	/* DO IT YOURSERLF */
    if(!root) return 0;
    Queue* queue = createQueue(3000);
    enqueue(queue,root);
	int ans = 0;

    while(!isEmpty(queue)){
        int levelwidth = 0;
        int nextnode = (queue->rear - queue->front + queue->capacity) % queue->capacity + 1;

        for(int i = 0; i < nextnode; i++){
            TreeNode* node = dequeue(queue);
            levelwidth++;

            if(node != NULL && node->val != -1){
                enqueue(queue, node->left);
                enqueue(queue, node->right);
            }
            else {
                enqueue(queue, NULL);
                enqueue(queue, NULL);
            }
        }
        
        if(levelwidth>ans){
            ans = levelwidth;
        }

        int allNULL = 1;
        for(int i = queue->front; i != queue->rear; i = (i+1) % queue->capacity){
            if(queue->array[i] != NULL && queue->array[i]->val != -1){
                allNULL = 0;
                break;
            }
        }
        if (queue->array[queue->rear] != NULL) {
            allNULL = 0;
        }
        if(allNULL){
            break;
        }
    }
    
    free(queue->array);
    free(queue);
    
	return ans;
}

int main() {

	// DO NOT MODIFY //
	int i=0, cnt=0, answer=0;
	char str[6000] = {0,};
	char *s;
	scanf("%[^\n]", str);	
	for (i = 2; i > 1; cnt += i > 0) {
  	i = sscanf(str, "%d%*[ ]%[^\n]", &arr[cnt], str);
	}
	// 위 코드를 수행하면 arr 에는 각 원소에 입력으로 받은 노드들이 저장됩니다.
	///////////////////
	TreeNode* root = createTree(arr, cnt);
	answer = solution(root);
	
	// DO NOT MODIFY //
	// answer 변수에 정답을 저장하고, 출력하세요
	printf("%d\n", answer);

	return 0;
}

